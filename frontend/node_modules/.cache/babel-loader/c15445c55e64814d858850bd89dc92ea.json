{"ast":null,"code":"const twilio = require(\"twilio\");\n\nconst AccessToken = twilio.jwt.AccessToken;\nconst {\n  ChatGrant,\n  VideoGrant,\n  VoiceGrant\n} = AccessToken;\n\nrequire('dotenv').config();\n\nconst generateToken = config => {\n  return new AccessToken(process.env.REACT_APP_TWILIO_ACCOUNT_SID, process.env.REACT_APP_TWILIO_API_KEY, process.env.REACT_APP_TWILIO_API_SECRET);\n};\n\nconst chatToken = (identity, config) => {\n  const chatGrant = new ChatGrant({\n    serviceSid: config.twilio.chatService\n  });\n  const token = generateToken(config);\n  token.addGrant(chatGrant);\n  token.identity = identity;\n  return token;\n};\n\nconst videoToken = (identity, room, config) => {\n  let videoGrant;\n\n  if (typeof room !== \"undefined\") {\n    videoGrant = new VideoGrant({\n      room\n    });\n  } else {\n    videoGrant = new VideoGrant();\n  }\n\n  const token = generateToken(config);\n  token.addGrant(videoGrant);\n  token.identity = identity;\n  return token;\n};\n\nconst voiceToken = (identity, config) => {\n  let voiceGrant;\n\n  if (typeof config.twilio.outgoingApplicationSid !== \"undefined\") {\n    voiceGrant = new VoiceGrant({\n      outgoingApplicationSid: config.twilio.outgoingApplicationSid,\n      incomingAllow: config.twilio.incomingAllow\n    });\n  } else {\n    voiceGrant = new VoiceGrant({\n      incomingAllow: config.twilio.incomingAllow\n    });\n  }\n\n  const token = generateToken(config);\n  token.addGrant(voiceGrant);\n  token.identity = identity;\n  return token;\n};\n\nmodule.exports = {\n  chatToken,\n  videoToken,\n  voiceToken\n};","map":{"version":3,"sources":["/Users/annllamb/Documents/GitHub/Intern-project/frontend/src/components/videoChat/token.js"],"names":["twilio","require","AccessToken","jwt","ChatGrant","VideoGrant","VoiceGrant","config","generateToken","process","env","REACT_APP_TWILIO_ACCOUNT_SID","REACT_APP_TWILIO_API_KEY","REACT_APP_TWILIO_API_SECRET","chatToken","identity","chatGrant","serviceSid","chatService","token","addGrant","videoToken","room","videoGrant","voiceToken","voiceGrant","outgoingApplicationSid","incomingAllow","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,WAAW,GAAGF,MAAM,CAACG,GAAP,CAAWD,WAA/B;AACA,MAAM;AAAEE,EAAAA,SAAF;AAAaC,EAAAA,UAAb;AAAyBC,EAAAA;AAAzB,IAAwCJ,WAA9C;;AAEAD,OAAO,CAAC,QAAD,CAAP,CAAkBM,MAAlB;;AAEA,MAAMC,aAAa,GAAGD,MAAM,IAAI;AAC9B,SAAO,IAAIL,WAAJ,CACLO,OAAO,CAACC,GAAR,CAAYC,4BADP,EAELF,OAAO,CAACC,GAAR,CAAYE,wBAFP,EAGLH,OAAO,CAACC,GAAR,CAAYG,2BAHP,CAAP;AAKD,CAND;;AAQA,MAAMC,SAAS,GAAG,CAACC,QAAD,EAAWR,MAAX,KAAsB;AACtC,QAAMS,SAAS,GAAG,IAAIZ,SAAJ,CAAc;AAC9Ba,IAAAA,UAAU,EAAEV,MAAM,CAACP,MAAP,CAAckB;AADI,GAAd,CAAlB;AAGA,QAAMC,KAAK,GAAGX,aAAa,CAACD,MAAD,CAA3B;AACAY,EAAAA,KAAK,CAACC,QAAN,CAAeJ,SAAf;AACAG,EAAAA,KAAK,CAACJ,QAAN,GAAiBA,QAAjB;AACA,SAAOI,KAAP;AACD,CARD;;AAUA,MAAME,UAAU,GAAG,CAACN,QAAD,EAAWO,IAAX,EAAiBf,MAAjB,KAA4B;AAC7C,MAAIgB,UAAJ;;AACA,MAAI,OAAOD,IAAP,KAAgB,WAApB,EAAiC;AAC/BC,IAAAA,UAAU,GAAG,IAAIlB,UAAJ,CAAe;AAAEiB,MAAAA;AAAF,KAAf,CAAb;AACD,GAFD,MAEO;AACLC,IAAAA,UAAU,GAAG,IAAIlB,UAAJ,EAAb;AACD;;AACD,QAAMc,KAAK,GAAGX,aAAa,CAACD,MAAD,CAA3B;AACAY,EAAAA,KAAK,CAACC,QAAN,CAAeG,UAAf;AACAJ,EAAAA,KAAK,CAACJ,QAAN,GAAiBA,QAAjB;AACA,SAAOI,KAAP;AACD,CAXD;;AAaA,MAAMK,UAAU,GAAG,CAACT,QAAD,EAAWR,MAAX,KAAsB;AACvC,MAAIkB,UAAJ;;AACA,MAAI,OAAOlB,MAAM,CAACP,MAAP,CAAc0B,sBAArB,KAAgD,WAApD,EAAiE;AAC/DD,IAAAA,UAAU,GAAG,IAAInB,UAAJ,CAAe;AAC1BoB,MAAAA,sBAAsB,EAAEnB,MAAM,CAACP,MAAP,CAAc0B,sBADZ;AAE1BC,MAAAA,aAAa,EAAEpB,MAAM,CAACP,MAAP,CAAc2B;AAFH,KAAf,CAAb;AAID,GALD,MAKO;AACLF,IAAAA,UAAU,GAAG,IAAInB,UAAJ,CAAe;AAC1BqB,MAAAA,aAAa,EAAEpB,MAAM,CAACP,MAAP,CAAc2B;AADH,KAAf,CAAb;AAGD;;AACD,QAAMR,KAAK,GAAGX,aAAa,CAACD,MAAD,CAA3B;AACAY,EAAAA,KAAK,CAACC,QAAN,CAAeK,UAAf;AACAN,EAAAA,KAAK,CAACJ,QAAN,GAAiBA,QAAjB;AACA,SAAOI,KAAP;AACD,CAhBD;;AAkBAS,MAAM,CAACC,OAAP,GAAiB;AAAEf,EAAAA,SAAF;AAAaO,EAAAA,UAAb;AAAyBG,EAAAA;AAAzB,CAAjB","sourcesContent":["const twilio = require(\"twilio\");\nconst AccessToken = twilio.jwt.AccessToken;\nconst { ChatGrant, VideoGrant, VoiceGrant } = AccessToken;\n\nrequire('dotenv').config();\n\nconst generateToken = config => {\n  return new AccessToken(\n    process.env.REACT_APP_TWILIO_ACCOUNT_SID,\n    process.env.REACT_APP_TWILIO_API_KEY,\n    process.env.REACT_APP_TWILIO_API_SECRET\n  );\n};\n\nconst chatToken = (identity, config) => {\n  const chatGrant = new ChatGrant({\n    serviceSid: config.twilio.chatService\n  });\n  const token = generateToken(config);\n  token.addGrant(chatGrant);\n  token.identity = identity;\n  return token;\n};\n\nconst videoToken = (identity, room, config) => {\n  let videoGrant;\n  if (typeof room !== \"undefined\") {\n    videoGrant = new VideoGrant({ room });\n  } else {\n    videoGrant = new VideoGrant();\n  }\n  const token = generateToken(config);\n  token.addGrant(videoGrant);\n  token.identity = identity;\n  return token;\n};\n\nconst voiceToken = (identity, config) => {\n  let voiceGrant;\n  if (typeof config.twilio.outgoingApplicationSid !== \"undefined\") {\n    voiceGrant = new VoiceGrant({\n      outgoingApplicationSid: config.twilio.outgoingApplicationSid,\n      incomingAllow: config.twilio.incomingAllow\n    });\n  } else {\n    voiceGrant = new VoiceGrant({\n      incomingAllow: config.twilio.incomingAllow\n    });\n  }\n  const token = generateToken(config);\n  token.addGrant(voiceGrant);\n  token.identity = identity;\n  return token;\n};\n\nmodule.exports = { chatToken, videoToken, voiceToken };"]},"metadata":{},"sourceType":"module"}