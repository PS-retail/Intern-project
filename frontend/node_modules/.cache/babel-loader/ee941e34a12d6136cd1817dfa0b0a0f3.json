{"ast":null,"code":"var _jsxFileName = \"/Users/annllamb/Documents/GitHub/Intern-project/frontend/src/components/videoChat/participent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Participant = ({\n  participant\n}) => {\n  _s();\n\n  const [videoTracks, setVideoTracks] = useState([]);\n  const [audioTracks, setAudioTracks] = useState([]);\n  const videoRef = useRef();\n  const audioRef = useRef();\n\n  const trackpubsToTracks = trackMap => Array.from(trackMap.values()).map(publication => publication.track).filter(track => track !== null);\n\n  useEffect(() => {\n    const trackSubscribed = track => {\n      if (track.kind === 'video') {\n        setVideoTracks(videoTracks => [...videoTracks, track]);\n      } else {\n        setAudioTracks(audioTracks => [...audioTracks, track]);\n      }\n    };\n\n    const trackUnsubscribed = track => {\n      if (track.kind === 'video') {\n        setVideoTracks(videoTracks => videoTracks.filter(v => v !== track));\n      } else {\n        setAudioTracks(audioTracks => audioTracks.filter(a => a !== track));\n      }\n    };\n\n    setVideoTracks(trackpubsToTracks(participant.videoTracks));\n    setAudioTracks(trackpubsToTracks(participant.audioTracks));\n    participant.on('trackSubscribed', trackSubscribed);\n    participant.on('trackUnsubscribed', trackUnsubscribed);\n    return () => {\n      setVideoTracks([]);\n      setAudioTracks([]);\n      participant.removeAllListeners();\n    };\n  }, [participant]);\n  useEffect(() => {\n    const videoTrack = videoTracks[0];\n\n    if (videoTrack) {\n      videoTrack.attach(videoRef.current);\n      return () => {\n        videoTrack.detach();\n      };\n    }\n  }, [videoTracks]);\n  useEffect(() => {\n    const audioTrack = audioTracks[0];\n\n    if (audioTrack) {\n      audioTrack.attach(audioRef.current);\n      return () => {\n        audioTrack.detach();\n      };\n    }\n  }, [audioTracks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"participant\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: participant.identity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      autoPlay: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Participant, \"mkU8c/5Desq4gBVgG4t6VGqYbcQ=\");\n\n_c = Participant;\nexport default Participant;\n\nvar _c;\n\n$RefreshReg$(_c, \"Participant\");","map":{"version":3,"sources":["/Users/annllamb/Documents/GitHub/Intern-project/frontend/src/components/videoChat/participent.js"],"names":["React","useState","useEffect","useRef","Participant","participant","videoTracks","setVideoTracks","audioTracks","setAudioTracks","videoRef","audioRef","trackpubsToTracks","trackMap","Array","from","values","map","publication","track","filter","trackSubscribed","kind","trackUnsubscribed","v","a","on","removeAllListeners","videoTrack","attach","current","detach","audioTrack","identity"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst Participant = ({ participant }) => {\n  const [videoTracks, setVideoTracks] = useState([]);\n  const [audioTracks, setAudioTracks] = useState([]);\n\n  const videoRef = useRef();\n  const audioRef = useRef();\n\n  const trackpubsToTracks = trackMap => Array.from(trackMap.values())\n    .map(publication => publication.track)\n    .filter(track => track !== null);\n\n  useEffect(() => {\n    const trackSubscribed = track => {\n        if (track.kind === 'video') {\n        setVideoTracks(videoTracks => [...videoTracks, track]);\n        } else {\n        setAudioTracks(audioTracks => [...audioTracks, track]);\n        }\n    };\n\n    const trackUnsubscribed = track => {\n        if (track.kind === 'video') {\n            setVideoTracks(videoTracks => videoTracks.filter(v => v !== track));\n        } else {\n            setAudioTracks(audioTracks => audioTracks.filter(a => a !== track));\n        }\n    }\n\n    setVideoTracks(trackpubsToTracks(participant.videoTracks));\n    setAudioTracks(trackpubsToTracks(participant.audioTracks));\n\n    participant.on('trackSubscribed', trackSubscribed);\n    participant.on('trackUnsubscribed', trackUnsubscribed);\n\n    return () => {\n      setVideoTracks([]);\n      setAudioTracks([]);\n      participant.removeAllListeners();\n    };\n  }, [participant]);\n\n  useEffect(() => {\n    const videoTrack = videoTracks[0];\n    if (videoTrack) {\n      videoTrack.attach(videoRef.current);\n      return () => {\n        videoTrack.detach();\n      };\n    }\n  }, [videoTracks]);\n  \n  useEffect(() => {\n    const audioTrack = audioTracks[0];\n    if (audioTrack) {\n      audioTrack.attach(audioRef.current);\n      return () => {\n        audioTrack.detach();\n      };\n    }\n  }, [audioTracks]);\n\n\n  return (\n    <div className=\"participant\">\n      <h3>{participant.identity}</h3>\n      <video ref={videoRef} autoPlay={true} />\n      <audio ref={audioRef} autoPlay={true} muted={true} />\n    </div>\n  );\n};\n\nexport default Participant;\n"]},"metadata":{},"sourceType":"module"}