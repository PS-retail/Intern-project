{"ast":null,"code":"import { forwardRef, useRef, useState, useCallback, useMemo, createElement, useContext } from 'react';\nimport { createNamedContext } from '@reach/utils/context';\nimport { isNumber, isBoolean } from '@reach/utils/type-check';\nimport { makeId } from '@reach/utils/make-id';\nimport { noop } from '@reach/utils/noop';\nimport { useCheckStyles } from '@reach/utils/dev-utils';\nimport { useComposedRefs } from '@reach/utils/compose-refs';\nimport { composeEventHandlers } from '@reach/utils/compose-event-handlers';\nimport { useStatefulRefValue } from '@reach/utils/use-stateful-ref-value';\nimport warning from 'tiny-warning';\nimport { createDescendantContext, useDescendantsInit, DescendantProvider, useDescendant, useDescendantKeyDown } from '@reach/descendants';\nimport { useId } from '@reach/auto-id';\nimport PropTypes from 'prop-types';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"as\", \"children\", \"defaultIndex\", \"index\", \"onChange\", \"readOnly\", \"collapsible\", \"multiple\"],\n    _excluded2 = [\"as\", \"children\", \"disabled\", \"index\"],\n    _excluded3 = [\"as\", \"children\", \"onClick\", \"onKeyDown\", \"onMouseDown\", \"onPointerDown\", \"tabIndex\"],\n    _excluded4 = [\"as\", \"children\"];\nvar AccordionDescendantContext = /*#__PURE__*/createDescendantContext(\"AccordionDescendantContext\");\nvar AccordionContext = /*#__PURE__*/createNamedContext(\"AccordionContext\", {});\nvar AccordionItemContext = /*#__PURE__*/createNamedContext(\"AccordionItemContext\", {}); ////////////////////////////////////////////////////////////////////////////////\n\nvar AccordionStates; ////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Accordion\n *\n * The wrapper component for all other accordion components. Each accordion\n * component will consist of accordion items whose buttons are keyboard\n * navigable using arrow keys.\n *\n * @see Docs https://reach.tech/accordion#accordion-1\n */\n\n(function (AccordionStates) {\n  AccordionStates[\"Open\"] = \"OPEN\";\n  AccordionStates[\"Collapsed\"] = \"COLLAPSED\";\n})(AccordionStates || (AccordionStates = {}));\n\nvar Accordion = /*#__PURE__*/forwardRef(function Accordion(_ref, forwardedRef) {\n  var _ref$as = _ref.as,\n      Comp = _ref$as === void 0 ? \"div\" : _ref$as,\n      children = _ref.children,\n      defaultIndex = _ref.defaultIndex,\n      controlledIndex = _ref.index,\n      onChange = _ref.onChange,\n      _ref$readOnly = _ref.readOnly,\n      readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,\n      _ref$collapsible = _ref.collapsible,\n      collapsible = _ref$collapsible === void 0 ? false : _ref$collapsible,\n      _ref$multiple = _ref.multiple,\n      multiple = _ref$multiple === void 0 ? false : _ref$multiple,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  /*\n   * You shouldn't switch between controlled/uncontrolled. We'll check for a\n   * controlled component and track any changes in a ref to show a warning.\n   */\n\n\n  var wasControlled = typeof controlledIndex !== \"undefined\";\n\n  var _React$useRef = useRef(wasControlled),\n      isControlled = _React$useRef.current;\n\n  var _useDescendantsInit = useDescendantsInit(),\n      descendants = _useDescendantsInit[0],\n      setDescendants = _useDescendantsInit[1];\n\n  var id = useId(props.id); // Define our default starting index\n\n  var _React$useState = useState(function () {\n    switch (true) {\n      case isControlled:\n        return controlledIndex;\n      // If we have a defaultIndex, we need to do a few checks\n      // If we have a defaultIndex, we need to do a few checks\n\n      case defaultIndex != null:\n        /*\n         * If multiple is set to true, we need to make sure the `defaultIndex`\n         * is an array (and vice versa). We'll handle console warnings in\n         * our propTypes, but this will at least keep the component from\n         * blowing up.\n         */\n        if (multiple) {\n          return Array.isArray(defaultIndex) ? defaultIndex : [defaultIndex];\n        } else {\n          var _defaultIndex$;\n\n          return Array.isArray(defaultIndex) ? (_defaultIndex$ = defaultIndex[0]) != null ? _defaultIndex$ : 0 : defaultIndex;\n        }\n\n      /*\n       * Collapsible accordions with no defaultIndex will start with all\n       * panels collapsed. Otherwise the first panel will be our default.\n       */\n\n      /*\n       * Collapsible accordions with no defaultIndex will start with all\n       * panels collapsed. Otherwise the first panel will be our default.\n       */\n\n      case collapsible:\n        return multiple ? [] : -1;\n\n      default:\n        return multiple ? [0] : 0;\n    }\n  }),\n      openPanels = _React$useState[0],\n      setOpenPanels = _React$useState[1];\n\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(!(!isControlled && wasControlled), \"Accordion is changing from controlled to uncontrolled. Accordion should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Accordion for the lifetime of the component. Check the `index` prop being passed in.\") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!(isControlled && !wasControlled), \"Accordion is changing from uncontrolled to controlled. Accordion should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled Accordion for the lifetime of the component. Check the `index` prop being passed in.\") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!(isControlled && collapsible), \"The `collapsible` prop on Accordion has no effect when the state of the component is controlled.\") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!(isControlled && multiple), \"The `multiple` prop on Accordion has no effect when the state of the component is controlled.\") : void 0;\n  }\n\n  var onSelectPanel = useCallback(function (index) {\n    onChange && onChange(index);\n\n    if (!isControlled) {\n      setOpenPanels(function (prevOpenPanels) {\n        /*\n         * If we're dealing with an uncontrolled component, the index arg\n         * in selectChange will always be a number rather than an array.\n         */\n        index = index; // multiple allowed\n\n        if (multiple) {\n          // state will always be an array here\n          prevOpenPanels = prevOpenPanels;\n\n          if ( // User is clicking on an already-open button\n          prevOpenPanels.includes(index)) {\n            // Other panels are open OR accordion is allowed to collapse\n            if (prevOpenPanels.length > 1 || collapsible) {\n              // Close the panel by filtering it from the array\n              return prevOpenPanels.filter(function (i) {\n                return i !== index;\n              });\n            }\n          } else {\n            // Open the panel by adding it to the array.\n            return [].concat(prevOpenPanels, [index]).sort();\n          }\n        } else {\n          prevOpenPanels = prevOpenPanels;\n          return prevOpenPanels === index && collapsible ? -1 : index;\n        }\n\n        return prevOpenPanels;\n      });\n    }\n  }, [collapsible, isControlled, multiple, onChange]);\n  var context = useMemo(function () {\n    return {\n      accordionId: id,\n      openPanels: isControlled ? controlledIndex : openPanels,\n      onSelectPanel: readOnly ? noop : onSelectPanel,\n      readOnly: readOnly\n    };\n  }, [openPanels, controlledIndex, id, isControlled, onSelectPanel, readOnly]);\n  useCheckStyles(\"accordion\");\n  return /*#__PURE__*/createElement(DescendantProvider, {\n    context: AccordionDescendantContext,\n    items: descendants,\n    set: setDescendants\n  }, /*#__PURE__*/createElement(AccordionContext.Provider, {\n    value: context\n  }, /*#__PURE__*/createElement(Comp, _extends({}, props, {\n    ref: forwardedRef,\n    \"data-reach-accordion\": \"\"\n  }), children)));\n});\n/**\n * @see Docs https://reach.tech/accordion#accordion-props\n */\n\nif (process.env.NODE_ENV !== \"production\") {\n  Accordion.displayName = \"Accordion\";\n  Accordion.propTypes = {\n    children: PropTypes.node.isRequired,\n    defaultIndex: /*#__PURE__*/PropTypes.oneOfType([PropTypes.number, /*#__PURE__*/PropTypes.arrayOf(PropTypes.number)]),\n    index: function index(props, name, compName, location, propName) {\n      var val = props[name];\n\n      if (props[name] != null && props.onChange == null && !props.readOnly) {\n        return new Error(\"You provided an `index` prop to `Accordion` without an `onChange` handler. This will render a read-only accordion element. If the accordion should be functional, remove the `index` value to render an uncontrolled accordion or set an `onChange` handler to set an index when a change occurs. If the accordion is intended to have a fixed state, use the `readOnly` prop with a `defaultIndex` instead of an `index`.\");\n      }\n\n      if (props[name] != null && props.defaultIndex != null) {\n        return new Error(\"You provided an `index` prop as well as a `defaultIndex` prop to `Accordion`. If you want a controlled component, use the index prop with an onChange handler. If you want an uncontrolled component, remove the index prop and use `defaultIndex` instead.\");\n      }\n\n      if (Array.isArray(props[name])) {\n        return props[name].some(function (i) {\n          return !isNumber(i);\n        }) ? new Error(\"You provided an array as an index in `Accordion` but one or more of the values are not numeric. Please check to make sure all indices are valid numbers.\") : null;\n      } else if (props[name] != null && !isNumber(props[name])) {\n        return new Error(\"Invalid prop \\\"\" + propName + \"\\\" supplied to \\\"\" + compName + \"\\\". Expected \\\"number\\\", received \\\"\" + (Array.isArray(val) ? \"array\" : typeof val) + \"\\\".\");\n      }\n\n      return null;\n    },\n    multiple: function multiple(props, name, compName, location, propName) {\n      if (!props[name] && Array.isArray(props.defaultIndex)) {\n        return new Error(\"The \\\"\" + propName + \"\\\" prop supplied to \\\"\" + compName + \"\\\" is not set or set to \\\"false\\\", but an array of indices was provided to the \\\"defaultIndex\\\" prop. \\\"\" + compName + \"\\\" can only have more than one default index if the \\\"\" + propName + \"\\\" prop is set to \\\"true\\\".\");\n      } else if (props[name] != null && !isBoolean(props[name])) {\n        return new Error(\"Invalid prop \\\"\" + propName + \"\\\" supplied to \\\"\" + compName + \"\\\". Expected \\\"boolean\\\", received \\\"\" + (Array.isArray(props[name]) ? \"array\" : typeof props[name]) + \"\\\".\");\n      }\n\n      return null;\n    },\n    onChange: PropTypes.func,\n    readOnly: PropTypes.bool,\n    collapsible: PropTypes.bool\n  };\n}\n/**\n * AccordionItem\n *\n * A group that wraps a an accordion's button and panel components.\n *\n * @see Docs https://reach.tech/accordion#accordionitem\n */\n\n\nvar AccordionItem = /*#__PURE__*/forwardRef(function AccordionItem(_ref2, forwardedRef) {\n  var _ref2$as = _ref2.as,\n      Comp = _ref2$as === void 0 ? \"div\" : _ref2$as,\n      children = _ref2.children,\n      _ref2$disabled = _ref2.disabled,\n      disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,\n      indexProp = _ref2.index,\n      props = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n  var _React$useContext = useContext(AccordionContext),\n      accordionId = _React$useContext.accordionId,\n      openPanels = _React$useContext.openPanels,\n      readOnly = _React$useContext.readOnly;\n\n  var buttonRef = useRef(null);\n\n  var _useStatefulRefValue = useStatefulRefValue(buttonRef, null),\n      element = _useStatefulRefValue[0],\n      handleButtonRefSet = _useStatefulRefValue[1];\n\n  var descendant = useMemo(function () {\n    return {\n      element: element,\n      disabled: disabled\n    };\n  }, [disabled, element]);\n  var index = useDescendant(descendant, AccordionDescendantContext, indexProp); // We need unique IDs for the panel and button to point to one another\n\n  var itemId = makeId(accordionId, index);\n  var panelId = makeId(\"panel\", itemId);\n  var buttonId = makeId(\"button\", itemId);\n  var state = (Array.isArray(openPanels) ? openPanels.includes(index) && AccordionStates.Open : openPanels === index && AccordionStates.Open) || AccordionStates.Collapsed;\n  var context = {\n    buttonId: buttonId,\n    buttonRef: buttonRef,\n    disabled: disabled,\n    handleButtonRefSet: handleButtonRefSet,\n    index: index,\n    itemId: itemId,\n    panelId: panelId,\n    state: state\n  };\n  return /*#__PURE__*/createElement(AccordionItemContext.Provider, {\n    value: context\n  }, /*#__PURE__*/createElement(Comp, _extends({}, props, {\n    ref: forwardedRef,\n    \"data-reach-accordion-item\": \"\",\n    \"data-state\": getDataState(state),\n    \"data-disabled\": disabled ? \"\" : undefined,\n    \"data-read-only\": readOnly ? \"\" : undefined\n  }), children));\n});\n/**\n * @see Docs https://reach.tech/accordion#accordionitem-props\n */\n\nif (process.env.NODE_ENV !== \"production\") {\n  AccordionItem.displayName = \"AccordionItem\";\n  AccordionItem.propTypes = {\n    disabled: PropTypes.bool\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AccordionButton\n *\n * The trigger button a user clicks to interact with an accordion.\n *\n * Must be a direct child of a `AccordionItem`.\n *\n * @see Docs https://reach.tech/accordion#accordionbutton\n */\n\n\nvar AccordionButton = /*#__PURE__*/forwardRef(function AccordionButton(_ref3, forwardedRef) {\n  var _ref3$as = _ref3.as,\n      Comp = _ref3$as === void 0 ? \"button\" : _ref3$as,\n      children = _ref3.children,\n      onClick = _ref3.onClick,\n      onKeyDown = _ref3.onKeyDown;\n  _ref3.onMouseDown;\n  _ref3.onPointerDown;\n\n  var tabIndex = _ref3.tabIndex,\n      props = _objectWithoutPropertiesLoose(_ref3, _excluded3);\n\n  var _React$useContext2 = useContext(AccordionContext),\n      onSelectPanel = _React$useContext2.onSelectPanel;\n\n  var _React$useContext3 = useContext(AccordionItemContext),\n      disabled = _React$useContext3.disabled,\n      buttonId = _React$useContext3.buttonId,\n      ownRef = _React$useContext3.buttonRef,\n      handleButtonRefSet = _React$useContext3.handleButtonRefSet,\n      index = _React$useContext3.index,\n      panelId = _React$useContext3.panelId,\n      state = _React$useContext3.state;\n\n  var ref = useComposedRefs(forwardedRef, handleButtonRefSet);\n\n  function handleClick(event) {\n    event.preventDefault();\n\n    if (disabled) {\n      return;\n    }\n\n    ownRef.current.focus();\n    onSelectPanel(index);\n  }\n\n  var handleKeyDown = useDescendantKeyDown(AccordionDescendantContext, {\n    currentIndex: index,\n    orientation: \"vertical\",\n    key: \"element\",\n    rotate: true,\n    callback: function callback(element) {\n      element == null ? void 0 : element.focus();\n    },\n    filter: function filter(button) {\n      return !button.disabled;\n    }\n  });\n  return /*#__PURE__*/createElement(Comp // Each accordion header `button` is wrapped in an element with role\n  // `heading` that has a value set for `aria-level` that is appropriate\n  // for the information architecture of the page.\n  // https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n  // I believe this should be left for apps to handle, since headings\n  // are necessarily context-aware. An app can wrap a button inside any\n  // arbitrary tag(s).\n  // TODO: Revisit documentation and examples\n  // @example\n  // <div>\n  //   <h3>\n  //     <AccordionButton>Click Me</AccordionButton>\n  //   </h3>\n  //   <SomeComponent />\n  // </div>\n  // The title of each accordion header is contained in an element with\n  // role `button`. We use an HTML button by default, so we can omit\n  // this attribute.\n  // https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n  // role=\"button\"\n  // The accordion header `button` element has `aria-controls` set to the\n  // ID of the element containing the accordion panel content.\n  // https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n  , _extends({\n    \"aria-controls\": panelId // If the accordion panel associated with an accordion header is\n    // visible, the header `button` element has `aria-expanded` set to\n    // `true`. If the panel is not visible, `aria-expanded` is set to\n    // `false`.\n    // https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n    ,\n    \"aria-expanded\": state === AccordionStates.Open,\n    tabIndex: disabled ? -1 : tabIndex\n  }, props, {\n    ref: ref,\n    \"data-reach-accordion-button\": \"\",\n    \"data-state\": getDataState(state) // If the accordion panel associated with an accordion header is\n    // visible, and if the accordion does not permit the panel to be\n    // collapsed, the header `button` element has `aria-disabled` set to\n    // `true`. We can use `disabled` since we opt for an HTML5 `button`\n    // element.\n    // https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n    ,\n    disabled: disabled || undefined,\n    id: buttonId,\n    onClick: composeEventHandlers(onClick, handleClick),\n    onKeyDown: composeEventHandlers(onKeyDown, handleKeyDown)\n  }), children);\n});\n/**\n * @see Docs https://reach.tech/accordion#accordionbutton-props\n */\n\nif (process.env.NODE_ENV !== \"production\") {\n  AccordionButton.displayName = \"AccordionButton\";\n  AccordionButton.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AccordionPanel\n *\n * The collapsible panel in which inner content for an accordion item is\n * rendered.\n *\n * @see Docs https://reach.tech/accordion#accordionpanel\n */\n\n\nvar AccordionPanel = /*#__PURE__*/forwardRef(function AccordionPanel(_ref4, forwardedRef) {\n  var _ref4$as = _ref4.as,\n      Comp = _ref4$as === void 0 ? \"div\" : _ref4$as,\n      children = _ref4.children,\n      props = _objectWithoutPropertiesLoose(_ref4, _excluded4);\n\n  var _React$useContext4 = useContext(AccordionItemContext),\n      disabled = _React$useContext4.disabled,\n      panelId = _React$useContext4.panelId,\n      buttonId = _React$useContext4.buttonId,\n      state = _React$useContext4.state;\n\n  return /*#__PURE__*/createElement(Comp, _extends({\n    hidden: state !== AccordionStates.Open // Optionally, each element that serves as a container for panel content\n    // has role `region` and `aria-labelledby` with a value that refers to\n    // the button that controls display of the panel.\n    // Role `region` is especially helpful to the perception of structure by\n    // screen reader users when panels contain heading elements or a nested\n    // accordion.\n    // https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n    // Avoid using the region role in circumstances that create landmark\n    // region proliferation, e.g., in an accordion that contains more than\n    // approximately 6 panels that can be expanded at the same time.\n    // A user can override this with `role=\"none\"` or `role=\"presentation\"`\n    // TODO: Add to docs\n    ,\n    role: \"region\",\n    \"aria-labelledby\": buttonId\n  }, props, {\n    ref: forwardedRef,\n    \"data-reach-accordion-panel\": \"\",\n    \"data-disabled\": disabled || undefined,\n    \"data-state\": getDataState(state),\n    id: panelId\n  }), children);\n});\n/**\n * @see Docs https://reach.tech/accordion#accordionpanel-props\n */\n\nif (process.env.NODE_ENV !== \"production\") {\n  AccordionPanel.displayName = \"AccordionPanel\";\n  AccordionPanel.propTypes = {\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Accordion` component to its\n * descendants.\n *\n * @see Docs https://reach.tech/accordion#useaccordioncontext\n */\n\n\nfunction useAccordionContext() {\n  var _React$useContext5 = useContext(AccordionContext),\n      openPanels = _React$useContext5.openPanels,\n      accordionId = _React$useContext5.accordionId;\n\n  return useMemo(function () {\n    var panels = [];\n    return {\n      id: accordionId,\n      openPanels: panels.concat(openPanels).filter(function (i) {\n        return i >= 0;\n      })\n    };\n  }, [accordionId, openPanels]);\n}\n/**\n * A hook that exposes data for a given `AccordionItem` component to its\n * descendants.\n *\n * @see Docs https://reach.tech/accordion#useaccordionitemcontext\n */\n\n\nfunction useAccordionItemContext() {\n  var _React$useContext6 = useContext(AccordionItemContext),\n      index = _React$useContext6.index,\n      state = _React$useContext6.state;\n\n  return useMemo(function () {\n    return {\n      index: index,\n      isExpanded: state === AccordionStates.Open\n    };\n  }, [index, state]);\n} ////////////////////////////////////////////////////////////////////////////////\n\n\nfunction getDataState(state) {\n  return state === AccordionStates.Open ? \"open\" : \"collapsed\";\n} ////////////////////////////////////////////////////////////////////////////////\n\n\nexport { Accordion, AccordionButton, AccordionItem, AccordionPanel, AccordionStates, useAccordionContext, useAccordionItemContext };","map":{"version":3,"sources":["/Users/annllamb/Documents/GitHub/Intern-project/frontend/node_modules/@reach/accordion/dist/reach-accordion.esm.js"],"names":["forwardRef","useRef","useState","useCallback","useMemo","createElement","useContext","createNamedContext","isNumber","isBoolean","makeId","noop","useCheckStyles","useComposedRefs","composeEventHandlers","useStatefulRefValue","warning","createDescendantContext","useDescendantsInit","DescendantProvider","useDescendant","useDescendantKeyDown","useId","PropTypes","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","_excluded","_excluded2","_excluded3","_excluded4","AccordionDescendantContext","AccordionContext","AccordionItemContext","AccordionStates","Accordion","_ref","forwardedRef","_ref$as","as","Comp","children","defaultIndex","controlledIndex","index","onChange","_ref$readOnly","readOnly","_ref$collapsible","collapsible","_ref$multiple","multiple","props","wasControlled","_React$useRef","isControlled","current","_useDescendantsInit","descendants","setDescendants","id","_React$useState","Array","isArray","_defaultIndex$","openPanels","setOpenPanels","process","env","NODE_ENV","onSelectPanel","prevOpenPanels","includes","filter","concat","sort","context","accordionId","items","set","Provider","value","ref","displayName","propTypes","node","isRequired","oneOfType","number","arrayOf","name","compName","location","propName","val","Error","some","func","bool","AccordionItem","_ref2","_ref2$as","_ref2$disabled","disabled","indexProp","_React$useContext","buttonRef","_useStatefulRefValue","element","handleButtonRefSet","descendant","itemId","panelId","buttonId","state","Open","Collapsed","getDataState","undefined","AccordionButton","_ref3","_ref3$as","onClick","onKeyDown","onMouseDown","onPointerDown","tabIndex","_React$useContext2","_React$useContext3","ownRef","handleClick","event","preventDefault","focus","handleKeyDown","currentIndex","orientation","rotate","callback","button","any","AccordionPanel","_ref4","_ref4$as","_React$useContext4","hidden","role","useAccordionContext","_React$useContext5","panels","useAccordionItemContext","_React$useContext6","isExpanded"],"mappings":"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","sourcesContent":["import { forwardRef, useRef, useState, useCallback, useMemo, createElement, useContext } from 'react';\nimport { createNamedContext } from '@reach/utils/context';\nimport { isNumber, isBoolean } from '@reach/utils/type-check';\nimport { makeId } from '@reach/utils/make-id';\nimport { noop } from '@reach/utils/noop';\nimport { useCheckStyles } from '@reach/utils/dev-utils';\nimport { useComposedRefs } from '@reach/utils/compose-refs';\nimport { composeEventHandlers } from '@reach/utils/compose-event-handlers';\nimport { useStatefulRefValue } from '@reach/utils/use-stateful-ref-value';\nimport warning from 'tiny-warning';\nimport { createDescendantContext, useDescendantsInit, DescendantProvider, useDescendant, useDescendantKeyDown } from '@reach/descendants';\nimport { useId } from '@reach/auto-id';\nimport PropTypes from 'prop-types';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"as\", \"children\", \"defaultIndex\", \"index\", \"onChange\", \"readOnly\", \"collapsible\", \"multiple\"],\n    _excluded2 = [\"as\", \"children\", \"disabled\", \"index\"],\n    _excluded3 = [\"as\", \"children\", \"onClick\", \"onKeyDown\", \"onMouseDown\", \"onPointerDown\", \"tabIndex\"],\n    _excluded4 = [\"as\", \"children\"];\nvar AccordionDescendantContext = /*#__PURE__*/createDescendantContext(\"AccordionDescendantContext\");\nvar AccordionContext = /*#__PURE__*/createNamedContext(\"AccordionContext\", {});\nvar AccordionItemContext = /*#__PURE__*/createNamedContext(\"AccordionItemContext\", {}); ////////////////////////////////////////////////////////////////////////////////\n\nvar AccordionStates; ////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Accordion\n *\n * The wrapper component for all other accordion components. Each accordion\n * component will consist of accordion items whose buttons are keyboard\n * navigable using arrow keys.\n *\n * @see Docs https://reach.tech/accordion#accordion-1\n */\n\n(function (AccordionStates) {\n  AccordionStates[\"Open\"] = \"OPEN\";\n  AccordionStates[\"Collapsed\"] = \"COLLAPSED\";\n})(AccordionStates || (AccordionStates = {}));\n\nvar Accordion = /*#__PURE__*/forwardRef(function Accordion(_ref, forwardedRef) {\n  var _ref$as = _ref.as,\n      Comp = _ref$as === void 0 ? \"div\" : _ref$as,\n      children = _ref.children,\n      defaultIndex = _ref.defaultIndex,\n      controlledIndex = _ref.index,\n      onChange = _ref.onChange,\n      _ref$readOnly = _ref.readOnly,\n      readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,\n      _ref$collapsible = _ref.collapsible,\n      collapsible = _ref$collapsible === void 0 ? false : _ref$collapsible,\n      _ref$multiple = _ref.multiple,\n      multiple = _ref$multiple === void 0 ? false : _ref$multiple,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  /*\n   * You shouldn't switch between controlled/uncontrolled. We'll check for a\n   * controlled component and track any changes in a ref to show a warning.\n   */\n  var wasControlled = typeof controlledIndex !== \"undefined\";\n\n  var _React$useRef = useRef(wasControlled),\n      isControlled = _React$useRef.current;\n\n  var _useDescendantsInit = useDescendantsInit(),\n      descendants = _useDescendantsInit[0],\n      setDescendants = _useDescendantsInit[1];\n\n  var id = useId(props.id); // Define our default starting index\n\n  var _React$useState = useState(function () {\n    switch (true) {\n      case isControlled:\n        return controlledIndex;\n      // If we have a defaultIndex, we need to do a few checks\n\n      // If we have a defaultIndex, we need to do a few checks\n      case defaultIndex != null:\n        /*\n         * If multiple is set to true, we need to make sure the `defaultIndex`\n         * is an array (and vice versa). We'll handle console warnings in\n         * our propTypes, but this will at least keep the component from\n         * blowing up.\n         */\n        if (multiple) {\n          return Array.isArray(defaultIndex) ? defaultIndex : [defaultIndex];\n        } else {\n          var _defaultIndex$;\n\n          return Array.isArray(defaultIndex) ? (_defaultIndex$ = defaultIndex[0]) != null ? _defaultIndex$ : 0 : defaultIndex;\n        }\n\n      /*\n       * Collapsible accordions with no defaultIndex will start with all\n       * panels collapsed. Otherwise the first panel will be our default.\n       */\n\n      /*\n       * Collapsible accordions with no defaultIndex will start with all\n       * panels collapsed. Otherwise the first panel will be our default.\n       */\n      case collapsible:\n        return multiple ? [] : -1;\n\n      default:\n        return multiple ? [0] : 0;\n    }\n  }),\n      openPanels = _React$useState[0],\n      setOpenPanels = _React$useState[1];\n\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(!(!isControlled && wasControlled), \"Accordion is changing from controlled to uncontrolled. Accordion should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Accordion for the lifetime of the component. Check the `index` prop being passed in.\") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!(isControlled && !wasControlled), \"Accordion is changing from uncontrolled to controlled. Accordion should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled Accordion for the lifetime of the component. Check the `index` prop being passed in.\") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!(isControlled && collapsible), \"The `collapsible` prop on Accordion has no effect when the state of the component is controlled.\") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!(isControlled && multiple), \"The `multiple` prop on Accordion has no effect when the state of the component is controlled.\") : void 0;\n  }\n\n  var onSelectPanel = useCallback(function (index) {\n    onChange && onChange(index);\n\n    if (!isControlled) {\n      setOpenPanels(function (prevOpenPanels) {\n        /*\n         * If we're dealing with an uncontrolled component, the index arg\n         * in selectChange will always be a number rather than an array.\n         */\n        index = index; // multiple allowed\n\n        if (multiple) {\n          // state will always be an array here\n          prevOpenPanels = prevOpenPanels;\n\n          if ( // User is clicking on an already-open button\n          prevOpenPanels.includes(index)) {\n            // Other panels are open OR accordion is allowed to collapse\n            if (prevOpenPanels.length > 1 || collapsible) {\n              // Close the panel by filtering it from the array\n              return prevOpenPanels.filter(function (i) {\n                return i !== index;\n              });\n            }\n          } else {\n            // Open the panel by adding it to the array.\n            return [].concat(prevOpenPanels, [index]).sort();\n          }\n        } else {\n          prevOpenPanels = prevOpenPanels;\n          return prevOpenPanels === index && collapsible ? -1 : index;\n        }\n\n        return prevOpenPanels;\n      });\n    }\n  }, [collapsible, isControlled, multiple, onChange]);\n  var context = useMemo(function () {\n    return {\n      accordionId: id,\n      openPanels: isControlled ? controlledIndex : openPanels,\n      onSelectPanel: readOnly ? noop : onSelectPanel,\n      readOnly: readOnly\n    };\n  }, [openPanels, controlledIndex, id, isControlled, onSelectPanel, readOnly]);\n  useCheckStyles(\"accordion\");\n  return /*#__PURE__*/createElement(DescendantProvider, {\n    context: AccordionDescendantContext,\n    items: descendants,\n    set: setDescendants\n  }, /*#__PURE__*/createElement(AccordionContext.Provider, {\n    value: context\n  }, /*#__PURE__*/createElement(Comp, _extends({}, props, {\n    ref: forwardedRef,\n    \"data-reach-accordion\": \"\"\n  }), children)));\n});\n/**\n * @see Docs https://reach.tech/accordion#accordion-props\n */\n\nif (process.env.NODE_ENV !== \"production\") {\n  Accordion.displayName = \"Accordion\";\n  Accordion.propTypes = {\n    children: PropTypes.node.isRequired,\n    defaultIndex: /*#__PURE__*/PropTypes.oneOfType([PropTypes.number, /*#__PURE__*/PropTypes.arrayOf(PropTypes.number)]),\n    index: function index(props, name, compName, location, propName) {\n      var val = props[name];\n\n      if (props[name] != null && props.onChange == null && !props.readOnly) {\n        return new Error(\"You provided an `index` prop to `Accordion` without an `onChange` handler. This will render a read-only accordion element. If the accordion should be functional, remove the `index` value to render an uncontrolled accordion or set an `onChange` handler to set an index when a change occurs. If the accordion is intended to have a fixed state, use the `readOnly` prop with a `defaultIndex` instead of an `index`.\");\n      }\n\n      if (props[name] != null && props.defaultIndex != null) {\n        return new Error(\"You provided an `index` prop as well as a `defaultIndex` prop to `Accordion`. If you want a controlled component, use the index prop with an onChange handler. If you want an uncontrolled component, remove the index prop and use `defaultIndex` instead.\");\n      }\n\n      if (Array.isArray(props[name])) {\n        return props[name].some(function (i) {\n          return !isNumber(i);\n        }) ? new Error(\"You provided an array as an index in `Accordion` but one or more of the values are not numeric. Please check to make sure all indices are valid numbers.\") : null;\n      } else if (props[name] != null && !isNumber(props[name])) {\n        return new Error(\"Invalid prop \\\"\" + propName + \"\\\" supplied to \\\"\" + compName + \"\\\". Expected \\\"number\\\", received \\\"\" + (Array.isArray(val) ? \"array\" : typeof val) + \"\\\".\");\n      }\n\n      return null;\n    },\n    multiple: function multiple(props, name, compName, location, propName) {\n      if (!props[name] && Array.isArray(props.defaultIndex)) {\n        return new Error(\"The \\\"\" + propName + \"\\\" prop supplied to \\\"\" + compName + \"\\\" is not set or set to \\\"false\\\", but an array of indices was provided to the \\\"defaultIndex\\\" prop. \\\"\" + compName + \"\\\" can only have more than one default index if the \\\"\" + propName + \"\\\" prop is set to \\\"true\\\".\");\n      } else if (props[name] != null && !isBoolean(props[name])) {\n        return new Error(\"Invalid prop \\\"\" + propName + \"\\\" supplied to \\\"\" + compName + \"\\\". Expected \\\"boolean\\\", received \\\"\" + (Array.isArray(props[name]) ? \"array\" : typeof props[name]) + \"\\\".\");\n      }\n\n      return null;\n    },\n    onChange: PropTypes.func,\n    readOnly: PropTypes.bool,\n    collapsible: PropTypes.bool\n  };\n}\n/**\n * AccordionItem\n *\n * A group that wraps a an accordion's button and panel components.\n *\n * @see Docs https://reach.tech/accordion#accordionitem\n */\n\n\nvar AccordionItem = /*#__PURE__*/forwardRef(function AccordionItem(_ref2, forwardedRef) {\n  var _ref2$as = _ref2.as,\n      Comp = _ref2$as === void 0 ? \"div\" : _ref2$as,\n      children = _ref2.children,\n      _ref2$disabled = _ref2.disabled,\n      disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,\n      indexProp = _ref2.index,\n      props = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n  var _React$useContext = useContext(AccordionContext),\n      accordionId = _React$useContext.accordionId,\n      openPanels = _React$useContext.openPanels,\n      readOnly = _React$useContext.readOnly;\n\n  var buttonRef = useRef(null);\n\n  var _useStatefulRefValue = useStatefulRefValue(buttonRef, null),\n      element = _useStatefulRefValue[0],\n      handleButtonRefSet = _useStatefulRefValue[1];\n\n  var descendant = useMemo(function () {\n    return {\n      element: element,\n      disabled: disabled\n    };\n  }, [disabled, element]);\n  var index = useDescendant(descendant, AccordionDescendantContext, indexProp); // We need unique IDs for the panel and button to point to one another\n\n  var itemId = makeId(accordionId, index);\n  var panelId = makeId(\"panel\", itemId);\n  var buttonId = makeId(\"button\", itemId);\n  var state = (Array.isArray(openPanels) ? openPanels.includes(index) && AccordionStates.Open : openPanels === index && AccordionStates.Open) || AccordionStates.Collapsed;\n  var context = {\n    buttonId: buttonId,\n    buttonRef: buttonRef,\n    disabled: disabled,\n    handleButtonRefSet: handleButtonRefSet,\n    index: index,\n    itemId: itemId,\n    panelId: panelId,\n    state: state\n  };\n  return /*#__PURE__*/createElement(AccordionItemContext.Provider, {\n    value: context\n  }, /*#__PURE__*/createElement(Comp, _extends({}, props, {\n    ref: forwardedRef,\n    \"data-reach-accordion-item\": \"\",\n    \"data-state\": getDataState(state),\n    \"data-disabled\": disabled ? \"\" : undefined,\n    \"data-read-only\": readOnly ? \"\" : undefined\n  }), children));\n});\n/**\n * @see Docs https://reach.tech/accordion#accordionitem-props\n */\n\nif (process.env.NODE_ENV !== \"production\") {\n  AccordionItem.displayName = \"AccordionItem\";\n  AccordionItem.propTypes = {\n    disabled: PropTypes.bool\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AccordionButton\n *\n * The trigger button a user clicks to interact with an accordion.\n *\n * Must be a direct child of a `AccordionItem`.\n *\n * @see Docs https://reach.tech/accordion#accordionbutton\n */\n\n\nvar AccordionButton = /*#__PURE__*/forwardRef(function AccordionButton(_ref3, forwardedRef) {\n  var _ref3$as = _ref3.as,\n      Comp = _ref3$as === void 0 ? \"button\" : _ref3$as,\n      children = _ref3.children,\n      onClick = _ref3.onClick,\n      onKeyDown = _ref3.onKeyDown;\n      _ref3.onMouseDown;\n      _ref3.onPointerDown;\n      var tabIndex = _ref3.tabIndex,\n      props = _objectWithoutPropertiesLoose(_ref3, _excluded3);\n\n  var _React$useContext2 = useContext(AccordionContext),\n      onSelectPanel = _React$useContext2.onSelectPanel;\n\n  var _React$useContext3 = useContext(AccordionItemContext),\n      disabled = _React$useContext3.disabled,\n      buttonId = _React$useContext3.buttonId,\n      ownRef = _React$useContext3.buttonRef,\n      handleButtonRefSet = _React$useContext3.handleButtonRefSet,\n      index = _React$useContext3.index,\n      panelId = _React$useContext3.panelId,\n      state = _React$useContext3.state;\n\n  var ref = useComposedRefs(forwardedRef, handleButtonRefSet);\n\n  function handleClick(event) {\n    event.preventDefault();\n\n    if (disabled) {\n      return;\n    }\n\n    ownRef.current.focus();\n    onSelectPanel(index);\n  }\n\n  var handleKeyDown = useDescendantKeyDown(AccordionDescendantContext, {\n    currentIndex: index,\n    orientation: \"vertical\",\n    key: \"element\",\n    rotate: true,\n    callback: function callback(element) {\n      element == null ? void 0 : element.focus();\n    },\n    filter: function filter(button) {\n      return !button.disabled;\n    }\n  });\n  return /*#__PURE__*/createElement(Comp // Each accordion header `button` is wrapped in an element with role\n  // `heading` that has a value set for `aria-level` that is appropriate\n  // for the information architecture of the page.\n  // https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n  // I believe this should be left for apps to handle, since headings\n  // are necessarily context-aware. An app can wrap a button inside any\n  // arbitrary tag(s).\n  // TODO: Revisit documentation and examples\n  // @example\n  // <div>\n  //   <h3>\n  //     <AccordionButton>Click Me</AccordionButton>\n  //   </h3>\n  //   <SomeComponent />\n  // </div>\n  // The title of each accordion header is contained in an element with\n  // role `button`. We use an HTML button by default, so we can omit\n  // this attribute.\n  // https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n  // role=\"button\"\n  // The accordion header `button` element has `aria-controls` set to the\n  // ID of the element containing the accordion panel content.\n  // https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n  , _extends({\n    \"aria-controls\": panelId // If the accordion panel associated with an accordion header is\n    // visible, the header `button` element has `aria-expanded` set to\n    // `true`. If the panel is not visible, `aria-expanded` is set to\n    // `false`.\n    // https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n    ,\n    \"aria-expanded\": state === AccordionStates.Open,\n    tabIndex: disabled ? -1 : tabIndex\n  }, props, {\n    ref: ref,\n    \"data-reach-accordion-button\": \"\",\n    \"data-state\": getDataState(state) // If the accordion panel associated with an accordion header is\n    // visible, and if the accordion does not permit the panel to be\n    // collapsed, the header `button` element has `aria-disabled` set to\n    // `true`. We can use `disabled` since we opt for an HTML5 `button`\n    // element.\n    // https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n    ,\n    disabled: disabled || undefined,\n    id: buttonId,\n    onClick: composeEventHandlers(onClick, handleClick),\n    onKeyDown: composeEventHandlers(onKeyDown, handleKeyDown)\n  }), children);\n});\n/**\n * @see Docs https://reach.tech/accordion#accordionbutton-props\n */\n\nif (process.env.NODE_ENV !== \"production\") {\n  AccordionButton.displayName = \"AccordionButton\";\n  AccordionButton.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AccordionPanel\n *\n * The collapsible panel in which inner content for an accordion item is\n * rendered.\n *\n * @see Docs https://reach.tech/accordion#accordionpanel\n */\n\n\nvar AccordionPanel = /*#__PURE__*/forwardRef(function AccordionPanel(_ref4, forwardedRef) {\n  var _ref4$as = _ref4.as,\n      Comp = _ref4$as === void 0 ? \"div\" : _ref4$as,\n      children = _ref4.children,\n      props = _objectWithoutPropertiesLoose(_ref4, _excluded4);\n\n  var _React$useContext4 = useContext(AccordionItemContext),\n      disabled = _React$useContext4.disabled,\n      panelId = _React$useContext4.panelId,\n      buttonId = _React$useContext4.buttonId,\n      state = _React$useContext4.state;\n\n  return /*#__PURE__*/createElement(Comp, _extends({\n    hidden: state !== AccordionStates.Open // Optionally, each element that serves as a container for panel content\n    // has role `region` and `aria-labelledby` with a value that refers to\n    // the button that controls display of the panel.\n    // Role `region` is especially helpful to the perception of structure by\n    // screen reader users when panels contain heading elements or a nested\n    // accordion.\n    // https://www.w3.org/TR/wai-aria-practices-1.2/#accordion\n    // Avoid using the region role in circumstances that create landmark\n    // region proliferation, e.g., in an accordion that contains more than\n    // approximately 6 panels that can be expanded at the same time.\n    // A user can override this with `role=\"none\"` or `role=\"presentation\"`\n    // TODO: Add to docs\n    ,\n    role: \"region\",\n    \"aria-labelledby\": buttonId\n  }, props, {\n    ref: forwardedRef,\n    \"data-reach-accordion-panel\": \"\",\n    \"data-disabled\": disabled || undefined,\n    \"data-state\": getDataState(state),\n    id: panelId\n  }), children);\n});\n/**\n * @see Docs https://reach.tech/accordion#accordionpanel-props\n */\n\nif (process.env.NODE_ENV !== \"production\") {\n  AccordionPanel.displayName = \"AccordionPanel\";\n  AccordionPanel.propTypes = {\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Accordion` component to its\n * descendants.\n *\n * @see Docs https://reach.tech/accordion#useaccordioncontext\n */\n\n\nfunction useAccordionContext() {\n  var _React$useContext5 = useContext(AccordionContext),\n      openPanels = _React$useContext5.openPanels,\n      accordionId = _React$useContext5.accordionId;\n\n  return useMemo(function () {\n    var panels = [];\n    return {\n      id: accordionId,\n      openPanels: panels.concat(openPanels).filter(function (i) {\n        return i >= 0;\n      })\n    };\n  }, [accordionId, openPanels]);\n}\n/**\n * A hook that exposes data for a given `AccordionItem` component to its\n * descendants.\n *\n * @see Docs https://reach.tech/accordion#useaccordionitemcontext\n */\n\n\nfunction useAccordionItemContext() {\n  var _React$useContext6 = useContext(AccordionItemContext),\n      index = _React$useContext6.index,\n      state = _React$useContext6.state;\n\n  return useMemo(function () {\n    return {\n      index: index,\n      isExpanded: state === AccordionStates.Open\n    };\n  }, [index, state]);\n} ////////////////////////////////////////////////////////////////////////////////\n\n\nfunction getDataState(state) {\n  return state === AccordionStates.Open ? \"open\" : \"collapsed\";\n} ////////////////////////////////////////////////////////////////////////////////\n\nexport { Accordion, AccordionButton, AccordionItem, AccordionPanel, AccordionStates, useAccordionContext, useAccordionItemContext };\n"]},"metadata":{},"sourceType":"module"}