{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport axios from 'axios';\nexport const useHttpClient = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const activeHttpRequests = useRef([]);\n  const sendRequest = useCallback(async ({\n    url,\n    method = 'get',\n    data = null,\n    headers = {\n      \"PRIVATE-KEY\": \"e517b4dd-8f14-4a54-b8ad-df456cbc8b50\"\n    }\n  }) => {\n    setIsLoading(true);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequests.current.push(httpAbortCtrl);\n    const config = {\n      method,\n      url,\n      headers,\n      data,\n      signal: httpAbortCtrl.signal\n    };\n\n    try {\n      const response = await axios(config);\n      const responseData = response.data;\n      activeHttpRequests.current = activeHttpRequests.current.filter(reqCtrl => reqCtrl !== httpAbortCtrl);\n      setIsLoading(false);\n      return responseData;\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      throw err;\n    }\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n    };\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  };\n};\n\n_s(useHttpClient, \"5LFg9Ro/5iGJ4ehzHD/qJSt5Ojo=\");","map":{"version":3,"sources":["/Users/annllamb/Documents/GitHub/Intern-project/frontend/src/components/general/http-hook.js"],"names":["useState","useCallback","useRef","useEffect","axios","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequests","sendRequest","url","method","data","headers","httpAbortCtrl","AbortController","current","push","config","signal","response","responseData","filter","reqCtrl","err","message","clearError","forEach","abortCtrl","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,EAAwCC,SAAxC,QAAyD,OAAzD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,EAAlC;AAEA,QAAMU,kBAAkB,GAAGR,MAAM,CAAC,EAAD,CAAjC;AAEA,QAAMS,WAAW,GAAGV,WAAW,CAC7B,OAAO;AAAEW,IAAAA,GAAF;AAAOC,IAAAA,MAAM,GAAG,KAAhB;AAAuBC,IAAAA,IAAI,GAAG,IAA9B;AAAoCC,IAAAA,OAAO,GAAG;AAAC,qBAAe;AAAhB;AAA9C,GAAP,KAAmH;AACjHR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMS,aAAa,GAAG,IAAIC,eAAJ,EAAtB;AACAP,IAAAA,kBAAkB,CAACQ,OAAnB,CAA2BC,IAA3B,CAAgCH,aAAhC;AAEA,UAAMI,MAAM,GAAG;AACbP,MAAAA,MADa;AAEbD,MAAAA,GAFa;AAGbG,MAAAA,OAHa;AAIbD,MAAAA,IAJa;AAKbO,MAAAA,MAAM,EAAEL,aAAa,CAACK;AALT,KAAf;;AAQA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACgB,MAAD,CAA5B;AAEA,YAAMG,YAAY,GAAGD,QAAQ,CAACR,IAA9B;AAEAJ,MAAAA,kBAAkB,CAACQ,OAAnB,GAA6BR,kBAAkB,CAACQ,OAAnB,CAA2BM,MAA3B,CAC3BC,OAAO,IAAIA,OAAO,KAAKT,aADI,CAA7B;AAIAT,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOgB,YAAP;AACD,KAXD,CAWE,OAAOG,GAAP,EAAY;AACZjB,MAAAA,QAAQ,CAACiB,GAAG,CAACC,OAAL,CAAR;AACApB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMmB,GAAN;AACD;AACF,GA9B4B,EA+B7B,EA/B6B,CAA/B;;AAkCA,QAAME,UAAU,GAAG,MAAM;AACvBnB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAFD;;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACXO,MAAAA,kBAAkB,CAACQ,OAAnB,CAA2BW,OAA3B,CAAmCC,SAAS,IAAIA,SAAS,CAACC,KAAV,EAAhD;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO;AAAEzB,IAAAA,SAAF;AAAaE,IAAAA,KAAb;AAAoBG,IAAAA,WAApB;AAAiCiB,IAAAA;AAAjC,GAAP;AACD,CAnDM;;GAAMvB,a","sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const activeHttpRequests = useRef([]);\n\n  const sendRequest = useCallback(\n    async ({ url, method = 'get', data = null, headers = {\"PRIVATE-KEY\": \"e517b4dd-8f14-4a54-b8ad-df456cbc8b50\"} }) => {\n      setIsLoading(true);\n      const httpAbortCtrl = new AbortController();\n      activeHttpRequests.current.push(httpAbortCtrl);\n\n      const config = {\n        method,\n        url,\n        headers,\n        data,\n        signal: httpAbortCtrl.signal\n      };\n\n      try {\n        const response = await axios(config);\n\n        const responseData = response.data;\n\n        activeHttpRequests.current = activeHttpRequests.current.filter(\n          reqCtrl => reqCtrl !== httpAbortCtrl\n        );\n\n        setIsLoading(false);\n        return responseData;\n      } catch (err) {\n        setError(err.message);\n        setIsLoading(false);\n        throw err;\n      }\n    },\n    []\n  );\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n    };\n  }, []);\n\n  return { isLoading, error, sendRequest, clearError };\n};"]},"metadata":{},"sourceType":"module"}